"""
Project for Week 4 of "Python Data Representations".
Find differences in file contents.

Be sure to read the project description page for further information
about the expected behavior of the program.
"""

IDENTICAL = -1

def singleline_diff(line1, line2):
    """
    Inputs:
      line1 - first single line string
      line2 - second single line string
    Output:
      Returns the index where the first difference between
      line1 and line2 occurs.
    """
    line1len = len(line1)
    line2len = len(line2)
    if line1len >= line2len:
        shortline = line2
        longline = line1
    elif line1len < line2len:
        shortline = line1
        longline = line2
        
    shortlinelen = len(shortline)
    longlinelen = len(longline)
    
    for num in range(shortlinelen):
        if shortline[num] != longline[num]:
            diff_index = num
            break
        else:
            diff_index = IDENTICAL
            continue 
    # MSBAK: break 사용 아주 좋고 잘 짜여져있습니다. 다만 continue는 구지 넣을 필요가 없네요.
    
    if diff_index == IDENTICAL:
        if shortlinelen == longlinelen:
            return IDENTICAL
        else:
            return shortlinelen -1
    else:
        return diff_index
    

def singleline_diff_format(line1, line2, idx):
    """
    Inputs:
      line1 - first single line string
      line2 - second single line string
      idx   - index at which to indicate difference
    Output:
      Returns a three line formatted string showing the location
      of the first difference between line1 and line2.

      If either input line contains a newline or carriage return,
      then returns an empty string.

      If idx is not a valid index, then returns an empty string.
    """
    find_newline1 = line1.find("\n")
    find_return1 = line1.find("\r")
    find_newline2 = line2.find("\n")
    find_return2 = line2.find("\r")
   
    if (find_newline1 == -1) and (find_return1 == -1) and (find_newline2 == -1) and (find_return2 == -1):
        
        # MSBAK 조건문을 변수형태로 사용하는것은 매우 좋은 습관입니다.
        # 다만 find_newline1, find_return1 등이 
        # 이미 Boolen 형이기 때문에 구지 find_return1  == -1와 같은 추가연산을 할필요는 없겟죠.
        # 예를들어
        # c1 = 4 > 1
        # 이면 c1 = True 이므로
        # if c1:
        #   print(1)
        # if문 작동합니다. 
  
        line1len = len(line1)
        line2len = len(line2)
        if line1len >= line2len:
            shortline = line2
        elif line1len < line2len:
            shortline = line1
        
        shortlinelen = len(shortline)
        
        if idx not in range(shortlinelen):
            return ""
        else:
            output = line1+"\n"+"="*(idx-1)+"^"+"\n"+line2
            return output
      
    else:
        return ""

    
def multiline_diff(lines1, lines2):
    """
    Inputs:
      lines1 - list of single line strings
      lines2 - list of single line strings
    Output:
      Returns a tuple containing the line number (starting from 0) and
      the index in that line where the first difference between lines1
      and lines2 occurs.

      Returns (IDENTICAL, IDENTICAL) if the two lists are the same.
    """
    list_lines1 = lines1.split("\n")
    list_lines2 = lines2.split("\n")
    
    lines1len = len(list_lines1)
    lines2len = len(list_lines2)
    if lines1len >= lines2len:
        shortlines = list_lines2
        longlines = list_lines1
    elif lines1len < lines2len:
        shortlines = list_lines1
        longlines = list_lines2
    shortlineslen = len(shortlines)
    longlineslen = len(longlines)
        
    for num in range(shortlineslen):
        if list_lines1[num] == list_lines2[num]:
            diff_line = IDENTICAL
            diff_index = IDENTICAL
        elif list_lines1[num] != list_lines2[num]:
            line1 = list_lines1[num]
            line2 = list_lines2[num]
            
            diff_line = num
            diff_index = singleline_diff(line1, line2)
            break
            
    if (diff_line == IDENTICAL) and (diff_index == IDENTICAL):
        if shortlineslen == longlineslen:
            return (IDENTICAL,IDENTICAL)
        else:
            return (shortlineslen,0)
    else:
        return (diff_line, diff_index)
    

def get_file_lines(filename):
    """
    Inputs:
      filename - name of file to read
    Output:
      Returns a list of lines from the file named filename.  Each
      line will be a single line string with no newline ('\n') or
      return ('\r') characters.

      If the file does not exist or is not readable, then the
      behavior of this function is undefined.
    """
    openfile = open (filename, "rt")
    data = openfile.read()
    datalist = list(data.split("\n"))
    if "\r" in data:
        print("please check return character.")            
    return datalist


def file_diff_format(filename1, filename2):
    """
    Inputs:
      filename1 - name of first file
      filename2 - name of second file
    Output:
      Returns a four line string showing the location of the first
      difference between the two files named by the inputs.

      If the files are identical, the function instead returns the
      string "No differences\n".

      If either file does not exist or is not readable, then the
      behavior of this function is undefined.
    """
    openfile1 = open(filename1, "rt")
    openfile2 = open(filename2, "rt")
    data1 = openfile1.read()
    data2 = openfile2.read()
    (diff_line, diff_index) = multiline_diff(data1, data2)
    if (diff_line == IDENTICAL)and (diff_index == IDENTICAL):
        return "No differences\n"
    else:
        file1linelist = get_file_lines(filename1)
        file2linelist = get_file_lines(filename2)
        line1 = file1linelist[diff_line]
        line2 = file2linelist[diff_line]
        
        return "Line"+diff_line+"\n"+singleline_diff_format(line1, line2, diff_index)


filename1 = "file2.txt"
filename2  = "file4.txt"
file_diff_format(filename1, filename2)
get_file_lines(filename1)












